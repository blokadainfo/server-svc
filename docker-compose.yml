services:
  # Reverse proxy
  crowdsec:
    image: docker.io/crowdsecurity/crowdsec:v1.6.10
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules"
      CUSTOM_HOSTNAME: "crowdsec"
      BOUNCER_KEY_TRAEFIK: ${BOUNCER_KEY_TRAEFIK}
    volumes:
      - type: volume
        source: traefik-logs-vol
        target: /var/log/traefik
        volume:
          nocopy: false
      - type: volume
        source: crowdsec-db-vol
        target: /var/lib/crowdsec/data
        volume:
          nocopy: false
      - type: volume
        source: crowdsec-conf-vol
        target: /etc/crowdsec
        volume:
          nocopy: false
      - type: bind
        source: ./acquis.yaml
        target: /etc/crowdsec/acquis.yaml
        read_only: true
    networks:
      - internal
    restart: unless-stopped

  traefik:
    depends_on:
      - crowdsec
    image: docker.io/library/traefik:v3.4.4
    command:
      - "--accesslog"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=acme/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--experimental.plugins.bouncer.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
      - "--experimental.plugins.bouncer.version=v1.4.4"
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
    volumes:
      - type: volume
        source: traefik-logs-vol
        target: /var/log/traefik
        volume:
          nocopy: false
      - type: volume
        source: traefik-acme-vol
        target: /acme
        volume:
          nocopy: false
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      - internal
    restart: unless-stopped

  # Bitwarden
  vaultwarden-postgres:
    image: docker.io/library/postgres:16.9
    environment:
      POSTGRES_DB: ${VAULTWARDEN_DATABASE_DB:-vw}
      POSTGRES_USER: ${VAULTWARDEN_DATABASE_USER:-vw}
      POSTGRES_PASSWORD: ${VAULTWARDEN_DATABASE_PASSWORD}
    volumes:
      - type: volume
        source: vaultwarden-postgres-vol
        target: /var/lib/postgresql/data
        volume:
          nocopy: false
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${VAULTWARDEN_DATABASE_USER:-vw} -d ${VAULTWARDEN_DATABASE_DB:-vw}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  vaultwarden-pgdumper:
    image: docker.io/martlark/pg_dump:16.1
    environment:
      CRON_SCHEDULE: "1 * * * *"
      RETAIN_COUNT: 1
      PGHOST: "vaultwarden-postgres"
      POSTGRES_DB: ${VAULTWARDEN_DATABASE_DB:-vw}
      PGUSER: ${VAULTWARDEN_DATABASE_USER:-vw}
      POSTGRES_PASSWORD: ${VAULTWARDEN_DATABASE_PASSWORD}
    volumes:
      - type: bind
        source: /var/stor/pgdump/vaultwarden
        target: /dump
    networks:
      - internal
    restart: unless-stopped
    depends_on:
      vaultwarden-postgres:
        condition: service_healthy
        restart: true

  vaultwarden:
    image: docker.io/vaultwarden/server:1.34.1
    environment:
      DATABASE_URL: "postgresql://${VAULTWARDEN_DATABASE_USER:-vw}:${VAULTWARDEN_DATABASE_PASSWORD}@vaultwarden-postgres:5432/${VAULTWARDEN_DATABASE_DB:-vw}"
      DOMAIN: "https://${VAULTWARDEN_DOMAIN}"
      SIGNUPS_ALLOWED: false
      SIGNUPS_VERIFY: true
      INVITATIONS_ALLOWED: true
      ORG_CREATION_USERS: ${VAULTWARDEN_ORG_CREATION_USERS:-none}
      PASSWORD_HINTS_ALLOWED: false
      ADMIN_TOKEN: ${VAULTWARDEN_ADMIN_TOKEN}
      SMTP_HOST: ${VAULTWARDEN_SMTP_HOST:-}
      SMTP_FROM: ${VAULTWARDEN_SMTP_FROM:-}
      SMTP_FROM_NAME: ${VAULTWARDEN_FROM_NAME:-}
      SMTP_USERNAME: ${VAULTWARDEN_SMTP_USERNAME:-}
      SMTP_PASSWORD: ${VAULTWARDEN_STMP_PASSWORD:-}
    volumes:
      - type: bind
        source: /var/stor/vaultwarden/data
        target: /data
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`${VAULTWARDEN_DOMAIN}`)"
      - "traefik.http.routers.vaultwarden.middlewares=crowdsec@docker"
      - "traefik.http.routers.vaultwarden.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden.tls=true"
      - "traefik.http.routers.vaultwarden.tls.certresolver=letsencrypt"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
    restart: unless-stopped
    depends_on:
      vaultwarden-postgres:
        condition: service_healthy
        restart: true

  # SFTPGo
  sftpgo-postgres:
    image: docker.io/library/postgres:16.9
    environment:
      POSTGRES_DB: ${SFTPGO_DATABASE_DB:-sgo}
      POSTGRES_USER: ${SFTPGO_DATABASE_USER:-sgo}
      POSTGRES_PASSWORD: ${SFTPGO_DATABASE_PASSWORD}
    volumes:
      - type: volume
        source: sftpgo-postgres-vol
        target: /var/lib/postgresql/data
        volume:
          nocopy: false
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${SFTPGO_DATABASE_USER:-sgo} -d ${SFTPGO_DATABASE_DB:-sgo}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  sftpgo-pgdumper:
    image: docker.io/martlark/pg_dump:16.1
    environment:
      CRON_SCHEDULE: "1 * * * *"
      RETAIN_COUNT: 1
      PGHOST: "sftpgo-postgres"
      POSTGRES_DB: ${SFTPGO_DATABASE_DB:-sgo}
      PGUSER: ${SFTPGO_DATABASE_USER:-sgo}
      POSTGRES_PASSWORD: ${SFTPGO_DATABASE_PASSWORD}
    volumes:
      - type: bind
        source: /var/stor/pgdump/sftpgo
        target: /dump
    networks:
      - internal
    restart: unless-stopped
    depends_on:
      sftpgo-postgres:
        condition: service_healthy
        restart: true

  sftpgo:
    image: ghcr.io/drakkan/sftpgo:v2.6.6-distroless-slim
    environment:
      SFTPGO_DEFAULT_ADMIN_USERNAME: ${SFTPGO_ADMIN_USERNAME:-admin}
      SFTPGO_DEFAULT_ADMIN_PASSWORD: ${SFTPGO_ADMIN_PASSWORD}
      SFTPGO_DATA_PROVIDER__CREATE_DEFAULT_ADMIN: true
      SFTPGO_DATA_PROVIDER__DRIVER: "postgresql"
      SFTPGO_DATA_PROVIDER__NAME: ${SFTPGO_DATABASE_DB:-sgo}
      SFTPGO_DATA_PROVIDER__HOST: "sftpgo-postgres"
      SFTPGO_DATA_PROVIDER__PORT: 5432
      SFTPGO_DATA_PROVIDER__USERNAME: ${SFTPGO_DATABASE_USER:-sgo}
      SFTPGO_DATA_PROVIDER__PASSWORD: ${SFTPGO_DATABASE_PASSWORD}
      SFTPGO_SMTP__HOST: ${SFTPGO_SMTP_HOST:-}
      SFTPGO_SMTP__PORT: ${SFTPGO_SMTP_PORT:-587}
      SFTPGO_SMTP__FROM: ${SFTPGO_SMTP_FROM:-}
      SFTPGO_SMTP__USER: ${SFTPGO_SMTP_USERNAME:-}
      SFTPGO_SMTP__PASSWORD: ${SFTPGO_SMTP_PASSWORD:-}
      SFTPGO_SMTP__ENCRYPTION: ${SFTPGO_SMTP_ENCRYPTION:-2}
    volumes:
      - type: bind
        source: /var/stor/sftpgo/internal
        target: /srv/sftpgo
      - type: bind
        source: /var/stor/sftpgo/storage
        target: /var/lib/sftpgo
    ports:
      - "2022:2022/tcp"
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sftpgo.rule=Host(`${SFTPGO_DOMAIN}`)"
      - "traefik.http.routers.sftpgo.middlewares=crowdsec@docker"
      - "traefik.http.routers.sftpgo.entrypoints=websecure"
      - "traefik.http.routers.sftpgo.tls=true"
      - "traefik.http.routers.sftpgo.tls.certresolver=letsencrypt"
      - "traefik.http.services.sftpgo.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
    restart: unless-stopped
    depends_on:
      sftpgo-postgres:
        condition: service_healthy
        restart: true

  # Gokapi
  gokapi-valkey:
    image: docker.io/valkey/valkey:8.1.3
    command:
      [
        "valkey-server",
        "--appendonly",
        "yes",
        "--requirepass",
        "${GOKAPI_REDIS_PASSWORD}",
      ]
    volumes:
      - type: volume
        source: gokapi-valkey-vol
        target: /data
        volume:
          nocopy: false
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "valkey-cli", "-a", "${GOKAPI_REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  gokapi:
    image: docker.io/f0rc3/gokapi:v2.0.1
    environment:
      DOCKER_NONROOT: true
      GOKAPI_CHUNK_SIZE_MB: ${GOKAPI_CHUNK_SIZE_MB:-45}
      GOKAPI_MAX_FILESIZE: ${GOKAPI_MAX_FILESIZE:-102400} # In MB, so 100GB
      GOKAPI_MAX_MEMORY_UPLOAD: ${GOKAPI_MAX_MEMORY_UPLOAD:-50}
      GOKAPI_MAX_PARALLEL_UPLOADS: ${GOKAPI_MAX_PARALLEL_UPLOADS:-4}
      GOKAPI_AWS_ENDPOINT: ${GOKAPI_AWS_ENDPOINT:-}
      GOKAPI_AWS_REGION: ${GOKAPI_AWS_REGION:-}
      GOKAPI_AWS_BUCKET: ${GOKAPI_AWS_BUCKET:-}
      GOKAPI_AWS_KEY: ${GOKAPI_AWS_KEY:-}
      GOKAPI_AWS_KEY_SECRET: ${GOKAPI_AWS_KEY_SECRET:-}
    volumes:
      - type: bind
        source: /var/stor/gokapi/config
        target: /app/config
      - type: bind
        source: /var/stor/gokapi/data
        target: /app/data
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gokapi.rule=Host(`${GOKAPI_DOMAIN}`)"
      - "traefik.http.routers.gokapi.middlewares=crowdsec@docker"
      - "traefik.http.routers.gokapi.entrypoints=websecure"
      - "traefik.http.routers.gokapi.tls=true"
      - "traefik.http.routers.gokapi.tls.certresolver=letsencrypt"
      - "traefik.http.services.gokapi.loadbalancer.server.port=53842"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
    restart: unless-stopped
    depends_on:
      gokapi-valkey:
        condition: service_healthy
        restart: true
      minio:
        condition: service_healthy
        restart: true

  # Mattermost
  # Jitsi Meet

  # MinIO
  minio:
    image: docker.io/minio/minio:RELEASE.2025-07-23T15-54-02Z
    command: "server /data"
    environment:
      MINIO_BROWSER_REDIRECT_URL: "https://${MINIO_DOMAIN}"
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - type: bind
        source: /var/stor/minio/data
        target: /data
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`${MINIO_DOMAIN}`)"
      - "traefik.http.routers.minio.middlewares=crowdsec@docker"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.routers.minio.tls=true"
      - "traefik.http.routers.minio.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`${MINIO_DOMAIN}`) && PathPrefix(`/console`)"
      - "traefik.http.routers.minio-console.middlewares=crowdsec@docker"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls=true"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecmode=stream"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}"
      - "traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecappsecenabled=true"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  # beszel github
networks:
  internal:
volumes:
  crowdsec-db-vol:
  crowdsec-conf-vol:
  traefik-logs-vol:
  traefik-acme-vol:
  vaultwarden-postgres-vol:
  sftpgo-postgres-vol:
  gokapi-valkey-vol:
